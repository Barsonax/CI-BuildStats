@using BuildStats.Core
@model BuildStats.Web.ViewModels.ChartViewModel
@{
    Layout = null;
    var yMultiplier = 2;
}
<!--
    This widget is provided by Dustin Moris Gorski (http://dusted.codes/).
    Source code is open source on GitHub: https://github.com/dustinmoris/CI-BuildStats
-->
<svg xmlns="http://www.w3.org/2000/svg" style="shape-rendering: geometricPrecision; image-rendering: optimizeQuality; fill-rule: evenodd; clip-rule: evenodd">
    <g font-family="Helvetica,Arial,sans-serif" font-size="@Model.Config.FontSize" fill="@Model.Config.TextColorCode">

        <text x="@Model.Config.PaddingX"
              y="@(Model.Config.FontSize*yMultiplier++)"
              font-weight="bold" 
              fill="@Model.Config.TitleColorCode">Build history (last @(Model.Builds.Count) builds)</text>

        @if (Model.ShowStats)
        {
            @: <text x="@Model.Config.PaddingX" y="@(Model.Config.FontSize*yMultiplier++ + Model.Config.BarGap)">Longest build time: @Model.LongestBuildTime.ToString(Model.Config.TimeSpanFormat)</text>
            @: <text x="@Model.Config.PaddingX" y="@(Model.Config.FontSize*yMultiplier++ + Model.Config.BarGap*2)">Shortest build time: @Model.ShortestBuildTime.ToString(Model.Config.TimeSpanFormat)</text>
            @: <text x="@Model.Config.PaddingX" y="@(Model.Config.FontSize*yMultiplier++ + Model.Config.BarGap*3)">Avergae build time: @Model.AverageBuildTime.ToString(Model.Config.TimeSpanFormat)</text>
        }

        @for (var i = 0; i < Model.Builds.Count; i++)
        {
            var build = Model.Builds[i];

            if (build.Status != BuildStatus.Queued && build.Status != BuildStatus.Running)
            {
                var x = i*(Model.Config.BarWidth + Model.Config.BarGap) + Model.Config.PaddingX;
                var factor = build.TotalTime.TotalMilliseconds/Model.LongestBuildTime.TotalMilliseconds;
                var height = factor*Model.Config.BarMaxHeight;
                if (build.Status == BuildStatus.Cancelled)
                {
                    height = 5;
                }
                var y = Model.Config.BarMaxHeight + Model.Config.FontSize*yMultiplier - height + 10;

                var colourCode = Model.Config.SucceededColorCode;

                if (build.Status == BuildStatus.Failed)
                {
                    colourCode = Model.Config.FailedColorCode;
                }
                else if (build.Status == BuildStatus.Cancelled)
                {
                    colourCode = Model.Config.CancelledColorCode;
                }

                <rect id="@build.BuildId" height="@height" width="@Model.Config.BarWidth" y="@y" x="@x" stroke-width="0" fill="@colourCode"/>
            }
        }
    </g>
</svg>